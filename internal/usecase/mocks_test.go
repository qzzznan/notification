// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	entity "notification/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBark is a mock of Bark interface.
type MockBark struct {
	ctrl     *gomock.Controller
	recorder *MockBarkMockRecorder
}

// MockBarkMockRecorder is the mock recorder for MockBark.
type MockBarkMockRecorder struct {
	mock *MockBark
}

// NewMockBark creates a new mock instance.
func NewMockBark(ctrl *gomock.Controller) *MockBark {
	mock := &MockBark{ctrl: ctrl}
	mock.recorder = &MockBarkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBark) EXPECT() *MockBarkMockRecorder {
	return m.recorder
}

// Push mocks base method.
func (m *MockBark) Push(arg0 context.Context, arg1 string, arg2 *entity.APNsMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockBarkMockRecorder) Push(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockBark)(nil).Push), arg0, arg1, arg2)
}

// Register mocks base method.
func (m *MockBark) Register(arg0 context.Context, arg1 *entity.BarkDevice) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockBarkMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockBark)(nil).Register), arg0, arg1)
}

// MockBarkRepo is a mock of BarkRepo interface.
type MockBarkRepo struct {
	ctrl     *gomock.Controller
	recorder *MockBarkRepoMockRecorder
}

// MockBarkRepoMockRecorder is the mock recorder for MockBarkRepo.
type MockBarkRepoMockRecorder struct {
	mock *MockBarkRepo
}

// NewMockBarkRepo creates a new mock instance.
func NewMockBarkRepo(ctrl *gomock.Controller) *MockBarkRepo {
	mock := &MockBarkRepo{ctrl: ctrl}
	mock.recorder = &MockBarkRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBarkRepo) EXPECT() *MockBarkRepoMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockBarkRepo) Get(arg0 context.Context, arg1 *entity.BarkDevice) (*entity.BarkDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*entity.BarkDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBarkRepoMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBarkRepo)(nil).Get), arg0, arg1)
}

// Store mocks base method.
func (m *MockBarkRepo) Store(arg0 context.Context, arg1 *entity.BarkDevice) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockBarkRepoMockRecorder) Store(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockBarkRepo)(nil).Store), arg0, arg1)
}

// MockBarkWebAPI is a mock of BarkWebAPI interface.
type MockBarkWebAPI struct {
	ctrl     *gomock.Controller
	recorder *MockBarkWebAPIMockRecorder
}

// MockBarkWebAPIMockRecorder is the mock recorder for MockBarkWebAPI.
type MockBarkWebAPIMockRecorder struct {
	mock *MockBarkWebAPI
}

// NewMockBarkWebAPI creates a new mock instance.
func NewMockBarkWebAPI(ctrl *gomock.Controller) *MockBarkWebAPI {
	mock := &MockBarkWebAPI{ctrl: ctrl}
	mock.recorder = &MockBarkWebAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBarkWebAPI) EXPECT() *MockBarkWebAPIMockRecorder {
	return m.recorder
}

// Push mocks base method.
func (m *MockBarkWebAPI) Push(arg0 context.Context, arg1 *entity.APNsMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockBarkWebAPIMockRecorder) Push(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockBarkWebAPI)(nil).Push), arg0, arg1)
}

// MockPushDeer is a mock of PushDeer interface.
type MockPushDeer struct {
	ctrl     *gomock.Controller
	recorder *MockPushDeerMockRecorder
}

// MockPushDeerMockRecorder is the mock recorder for MockPushDeer.
type MockPushDeerMockRecorder struct {
	mock *MockPushDeer
}

// NewMockPushDeer creates a new mock instance.
func NewMockPushDeer(ctrl *gomock.Controller) *MockPushDeer {
	mock := &MockPushDeer{ctrl: ctrl}
	mock.recorder = &MockPushDeerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPushDeer) EXPECT() *MockPushDeerMockRecorder {
	return m.recorder
}

// MockPushDeerRepo is a mock of PushDeerRepo interface.
type MockPushDeerRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPushDeerRepoMockRecorder
}

// MockPushDeerRepoMockRecorder is the mock recorder for MockPushDeerRepo.
type MockPushDeerRepoMockRecorder struct {
	mock *MockPushDeerRepo
}

// NewMockPushDeerRepo creates a new mock instance.
func NewMockPushDeerRepo(ctrl *gomock.Controller) *MockPushDeerRepo {
	mock := &MockPushDeerRepo{ctrl: ctrl}
	mock.recorder = &MockPushDeerRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPushDeerRepo) EXPECT() *MockPushDeerRepoMockRecorder {
	return m.recorder
}

// MockPushDeerWebAPI is a mock of PushDeerWebAPI interface.
type MockPushDeerWebAPI struct {
	ctrl     *gomock.Controller
	recorder *MockPushDeerWebAPIMockRecorder
}

// MockPushDeerWebAPIMockRecorder is the mock recorder for MockPushDeerWebAPI.
type MockPushDeerWebAPIMockRecorder struct {
	mock *MockPushDeerWebAPI
}

// NewMockPushDeerWebAPI creates a new mock instance.
func NewMockPushDeerWebAPI(ctrl *gomock.Controller) *MockPushDeerWebAPI {
	mock := &MockPushDeerWebAPI{ctrl: ctrl}
	mock.recorder = &MockPushDeerWebAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPushDeerWebAPI) EXPECT() *MockPushDeerWebAPIMockRecorder {
	return m.recorder
}

// Push mocks base method.
func (m *MockPushDeerWebAPI) Push(arg0 context.Context, arg1 []*entity.Device, arg2 *entity.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockPushDeerWebAPIMockRecorder) Push(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockPushDeerWebAPI)(nil).Push), arg0, arg1, arg2)
}
